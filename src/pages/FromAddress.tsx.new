import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { generateUDPIN, formatUDPIN } from '../lib/udpin';
import { reverseGeocode } from '../lib/geocoding';

// Fix for default marker icons in Leaflet with React
import markerIcon from 'leaflet/dist/images/marker-icon.png';
import markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';
import markerShadow from 'leaflet/dist/images/marker-shadow.png';

// @ts-ignore
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconUrl: markerIcon,
  iconRetinaUrl: markerIcon2x,
  shadowUrl: markerShadow,
});

interface LocationMarkerProps {
  position: [number, number];
  onPositionChange: (pos: [number, number]) => void;
  popupText: string;
}

const LocationMarker: React.FC<LocationMarkerProps> = ({ 
  position, 
  onPositionChange,
  popupText 
}) => {
  useMapEvents({
    click(e) {
      const newPos: [number, number] = [e.latlng.lat, e.latlng.lng];
      onPositionChange(newPos);
    },
  });

  return (
    <Marker position={position}>
      <Popup>{popupText}</Popup>
    </Marker>
  );
};

interface LocationData {
  position: [number, number] | null;
  address: string;
  locationName: string;
  udpin: string;
}

const FromAddress: React.FC = () => {
  const [location, setLocation] = useState<LocationData>({
    position: null,
    address: '',
    locationName: '',
    udpin: ''
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const mapRef = useRef<L.Map>(null);

  const updateLocationData = useCallback(async (pos: [number, number]) => {
    try {
      setIsLoading(true);
      const [newUdpin, address] = await Promise.all([
        formatUDPIN(generateUDPIN(pos[0], pos[1])),
        reverseGeocode(pos[0], pos[1])
      ]);

      setLocation(prev => ({
        ...prev,
        position: pos,
        address: address || 'Address not available',
        locationName: prev.locationName || (address ? address.split(',')[0].trim() : 'My Location'),
        udpin: newUdpin
      }));
    } catch (error) {
      console.error('Error updating location data:', error);
      setLocation(prev => ({
        ...prev,
        address: 'Error fetching address'
      }));
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handlePositionChange = useCallback((newPosition: [number, number]) => {
    setLocation(prev => ({
      ...prev,
      position: newPosition
    }));
    
    if (mapRef.current) {
      mapRef.current.flyTo(newPosition, 15, {
        animate: true,
        duration: 1.5,
      });
    }
    
    updateLocationData(newPosition);
  }, [updateLocationData]);

  const handleSearch = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    if (!searchQuery.trim()) return;

    try {
      setIsLoading(true);
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchQuery)}`
      );
      
      if (!response.ok) {
        throw new Error('Failed to fetch location');
      }
      
      const data = await response.json();
      
      if (data && data.length > 0) {
        const { lat, lon } = data[0];
        const newPosition: [number, number] = [parseFloat(lat), parseFloat(lon)];
        handlePositionChange(newPosition);
      }
    } catch (error) {
      console.error('Error searching location:', error);
      alert('Failed to find location. Please try again.');
    } finally {
      setIsLoading(false);
    }
  }, [searchQuery, handlePositionChange]);

  const copyAddressToLocation = useCallback(() => {
    setLocation(prev => ({
      ...prev,
      locationName: prev.address
    }));
  }, []);

  const handleSaveLocation = useCallback(() => {
    console.log('Location saved:', location);
    alert('Location saved successfully!');
  }, [location]);

  const MapDisplay = useMemo(() => {
    if (!location.position) return null;
    
    return (
      <MapContainer
        key={`map-${location.position[0]}-${location.position[1]}`}
        center={location.position}
        zoom={15}
        style={{ height: '100%', width: '100%' }}
        zoomControl={true}
        className="z-0"
        ref={mapRef}
      >
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        />
        <LocationMarker 
          position={location.position} 
          onPositionChange={handlePositionChange}
          popupText={`From: ${location.locationName || 'My Location'}`}
        />
      </MapContainer>
    );
  }, [location.position, location.locationName, handlePositionChange]);

  useEffect(() => {
    let isMounted = true;
    
    const getCurrentLocation = () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            if (!isMounted) return;
            const { latitude, longitude } = position.coords;
            const newPosition: [number, number] = [latitude, longitude];
            handlePositionChange(newPosition);
          },
          (error) => {
            console.error('Error getting location:', error);
            const defaultPosition: [number, number] = [20.5937, 78.9629];
            handlePositionChange(defaultPosition);
          },
          { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
        );
      } else {
        console.error('Geolocation is not supported by this browser');
        const defaultPosition: [number, number] = [20.5937, 78.9629];
        handlePositionChange(defaultPosition);
      }
    };

    getCurrentLocation();

    return () => {
      isMounted = false;
    };
  }, [handlePositionChange]);

  return (
    <div className="flex flex-col h-screen">
      <div className="bg-blue-600 text-white p-4">
        <h1 className="text-xl font-bold">From Address</h1>
      </div>
      
      <div className="flex-1 overflow-hidden">
        <div className="h-full flex flex-col">
          <div className="p-4 border-b">
            <form onSubmit={handleSearch} className="flex gap-2">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search for a location..."
                className="flex-1 p-2 border rounded"
              />
              <button 
                type="submit" 
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                disabled={isLoading}
              >
                {isLoading ? 'Searching...' : 'Search'}
              </button>
            </form>
          </div>
          
          <div className="flex-1 relative">
            {isLoading && (
              <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10">
                <div className="bg-white p-4 rounded-lg">
                  <p>Loading map...</p>
                </div>
              </div>
            )}
            <div className="h-full w-full">
              {MapDisplay}
            </div>
          </div>
          
          <div className="p-4 border-t">
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Location Name
              </label>
              <div className="flex gap-2">
                <input
                  type="text"
                  value={location.locationName}
                  onChange={(e) => 
                    setLocation(prev => ({ ...prev, locationName: e.target.value }))
                  }
                  placeholder="Enter location name"
                  className="flex-1 p-2 border rounded"
                />
                <button
                  type="button"
                  onClick={copyAddressToLocation}
                  className="bg-gray-200 hover:bg-gray-300 px-3 py-2 rounded"
                  title="Copy from address"
                >
                  ðŸ“‹
                </button>
              </div>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Address
              </label>
              <textarea
                value={location.address}
                readOnly
                className="w-full p-2 border rounded bg-gray-50"
                rows={3}
              />
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                UDPIN
              </label>
              <div className="flex items-center gap-2">
                <input
                  type="text"
                  value={location.udpin}
                  readOnly
                  className="flex-1 p-2 border rounded bg-gray-50 font-mono"
                />
                <button
                  type="button"
                  onClick={() => {
                    navigator.clipboard.writeText(location.udpin);
                    alert('UDPIN copied to clipboard!');
                  }}
                  className="bg-gray-200 hover:bg-gray-300 px-3 py-2 rounded"
                  title="Copy UDPIN"
                >
                  ðŸ“‹
                </button>
              </div>
            </div>
            
            <button
              type="button"
              onClick={handleSaveLocation}
              className="w-full bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600"
              disabled={isLoading}
            >
              {isLoading ? 'Saving...' : 'Save Location'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FromAddress;
